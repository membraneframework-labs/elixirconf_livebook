# Creating Jellyfish conference

```elixir
nil
```

## Resources

TODO

## Setup Jellyfish

Start by getting Jellyfish serer up and running

First, let's create `.env` file with env vars for Jellyfish

```.env
# used by the server e.g. to create tokens
SECRET_KEY_BASE=super-secret-key

# true, if WebRTC peers are used
WEBRTC_USED=true

# hostname used to generate URLs through the server
VIRTUAL_HOST=localhost
PORT=5000

# Token used by the backend to connect to the server
TOKEN=notoken

# TURN default configuration
# note: loopback address as INTEGRATED_TURN_IP cannot be used inside a Docker container
INTEGRATED_TURN_IP=<PUT YOUR MACHINE IP HERE>
INTEGRATED_TURN_PORT_RANGE=50000-50050
INTEGRATED_TCP_TURN_PORT=49999
```

Getting your machine IP

```bash
# Linux
ip addr show

# macOS
ifconfig en0
```

### Using Docker

Then run

```bash
docker run --env-file .env -p 50000-50050:50000-50050/udp -p 5000:5000/tcp -p 49999:49999/tcp ghcr.io/jellyfish-dev/jellyfish:latest
```

### Run locally

Follow: https://jellyfish-dev.github.io/jellyfish-docs/getting_started/installation

### Result

You should be able to query Jellyfish:

```bash
$ curl localhost:5000
{"errors":{"detail":"Not Found"}}
```

## Setup Phoenix backend

Let's create a Phoenix app with our buisness logic. Once again we'll start with Phoenix generator with following flags

```bash
mix phx.new --no-ecto --no-live --no-mailer --no-gettext jellyroom
```

Add Jellyfish SDK to Elixir deps in `mix.exs`:

<!-- livebook:{"force_markdown":true} -->

```elixir
{:jellyfish_server_sdk, "~> 0.1.0"},
```

Go to assets directory and install Jellyfish JS dependencies:

```bash
npm install jellyfish-dev/jellyfish-react-client/jellyfish#main --save
```

Now we're ready to start development of our own videoconferencing app.
